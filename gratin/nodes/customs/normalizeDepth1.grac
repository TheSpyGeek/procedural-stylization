<Gratin type="node">
 <int val="0" name="majorVersion"/>
 <int val="3" name="minorVersion"/>
 <string val="imgGenericId" name="coreHandleStringId"/>
 <uint val="1" name="coreHandleVersion"/>
 <string val="normalizeDepth" name="nodeStringId-0"/>
 <uint val="1" name="nodeVersion-0"/>
 <string val="normalizeDepth" name="nodeName-0"/>
 <string val="SilhouetteExtension/" name="nodePath-0"/>
 <string val="Normalize depth buffer" name="nodeDesc-0"/>
 <string val="This node was designed to create custom shaders The settings widget allows to modify input, output parameters as well as the output image sizes. WARNING1: you will be able to modify the number of inputs/outputs only if the node is entirely disconnected. WARNING2: input/output names will not be modified if a custom node is created from this node because these names should be edited directly in the setting widget WARNING3: modifying the settings of a node will remove all previously defined keyframes * Special data allows to modify the output image (using a multiple of the input size, plus an offset vector Check use mouse/keyboard if you want to interact with the mouse * Input data allows to add/remove/displace input data (only if disconnected) * Output data allows to add/remove/displace output data (only if disconnected) * Param data allows to add/remove parameters that will automatically be included in your shader. For each of them you may choose a proper name, type, and min/max/default values. Check keyframes if you want your parameter to be accessible through the animation widget In the node interface itself: Source tab contains the head and body of your GLSL source (only the body is editable) Params tab contains the defined widgets according to your setting choices Log tab contains compilation errors Once your settings and source completed, click on apply to see the result " name="nodeHelp-0"/>
 <uint val="10" name="nodeId-0"/>
 <uint val="0" name="nodeGraphId-0"/>
 <vector2f name="nodePos-0">
  <float val="-21269.2" name="0"/>
  <float val="-12316.9" name="1"/>
 </vector2f>
 <int val="1" name="nodeInputNameSize-0"/>
 <int val="1" name="nodeOutputNameSize-0"/>
 <string val="inBuffer0" name="nodeInputName-0-0"/>
 <string val="outBuffer0" name="nodeOutputName-0-0"/>
 <bool val="1" name="nodeHasWidget-0"/>
 <IOData name="node-0">
  <string val="420" name="genericGlslVersion"/>
  <string val="normalizeDepth" name="genericNodeName"/>
  <bool val="0" name="genericUseVertex"/>
  <bool val="0" name="genericUseTesselation"/>
  <bool val="0" name="genericUseGeometry"/>
  <bool val="1" name="genericUseFragment"/>
  <int val="9729" name="genericOutFilter"/>
  <int val="33071" name="genericOutWrap"/>
  <bool val="0" name="genericUseDepthTest"/>
  <bool val="0" name="genericUseBlending"/>
  <uint val="513" name="genericDepthFunc"/>
  <uint val="1" name="genericBlendSrc"/>
  <uint val="0" name="genericBlendDst"/>
  <vector4f name="genericBackground">
   <float val="0" name="0"/>
   <float val="0" name="1"/>
   <float val="0" name="2"/>
   <float val="0" name="3"/>
  </vector4f>
  <string val="#version 420&#xa;&#xa;layout(location = 0) in vec2 vertex;&#xa;layout(location = 1) in vec2 coord;&#xa;uniform sampler2D inBuffer0;&#xa;" name="genericVertHead"/>
  <string val="out vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = vec4(vertex,0,1);&#xa;&#x9;texcoord    = coord;&#xa;}&#xa;" name="genericVertBody"/>
  <string val="#version 420&#xa;&#xa;layout(location = 0) out vec4 outBuffer0;&#xa;uniform sampler2D inBuffer0;&#xa;" name="genericFragHead"/>
  <string val="in vec2 texcoord;&#xa;&#xa;void main() {&#xa;&#x9;vec2 s = textureSize(inBuffer0,0);&#xa;&#x9;float l = 1.+floor(log2(max(s.x,s.y)));&#xa;&#x9;vec4 dl = textureLod(inBuffer0,vec2(.5),l);&#xa;&#x9;vec4 d = texture(inBuffer0,texcoord);&#xa;&#xa;&#x9;float nd = (d.x-dl.y)/((dl.x-dl.y));&#xa;&#xa;&#x9;outBuffer0 = vec4(nd,nd,nd,d.w);&#xa;}&#xa;" name="genericFragBody"/>
  <string val="#version 420&#xa;&#xa;layout(vertices = 4) out;&#xa;uniform sampler2D inBuffer0;&#xa;" name="genericTessCHead"/>
  <string val="void main(void) {&#xa;&#x9;gl_TessLevelOuter[0] = 1;&#xa;&#x9;gl_TessLevelOuter[1] = 1;&#xa;&#x9;gl_TessLevelOuter[2] = 1;&#xa;&#x9;gl_TessLevelOuter[3] = 1;&#xa;&#x9;gl_TessLevelInner[0] = 1;&#xa;&#x9;gl_TessLevelInner[1] = 1;&#xa;&#x9;gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;&#xa;}&#xa;" name="genericTessCBody"/>
  <string val="#version 420&#xa;&#xa;uniform sampler2D inBuffer0;&#xa;" name="genericTessEHead"/>
  <string val="layout(quads,equal_spacing) in;&#xa;&#xa;void main() {&#xa;&#x9;vec4 p1 = mix(gl_in[0].gl_Position,gl_in[1].gl_Position,gl_TessCoord.x);&#xa;&#x9;vec4 p2 = mix(gl_in[3].gl_Position,gl_in[2].gl_Position,gl_TessCoord.x);&#xa;&#x9;gl_Position = mix(p1,p2,gl_TessCoord.y);&#xa;}&#xa;" name="genericTessEBody"/>
  <string val="#version 420&#xa;&#xa;layout(triangles) in;&#xa;uniform sampler2D inBuffer0;&#xa;" name="genericGeomHead"/>
  <string val="layout(triangle_strip, max_vertices = 3) out;&#xa;&#xa;void main() {&#xa;&#x9;gl_Position = gl_in[0].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[1].gl_Position; EmitVertex();&#xa;&#x9;gl_Position = gl_in[2].gl_Position; EmitVertex();&#xa;&#x9;EndPrimitive();&#xa;}" name="genericGeomBody"/>
  <vector2f name="genericTSize">
   <float val="1" name="0"/>
   <float val="1" name="1"/>
  </vector2f>
  <vector2f name="genericTOffset">
   <float val="0" name="0"/>
   <float val="0" name="1"/>
  </vector2f>
  <bool val="0" name="genericNeedMouse"/>
  <bool val="0" name="genericNeedKeyboard"/>
  <uint val="0" name="genericNbWidgets"/>
 </IOData>
 <IOData name="nodeWidget-0">
  <uint val="0" name="nbChildren"/>
 </IOData>
 <vector2f name="nodeInputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
 <vector2f name="nodeOutputPos-0-0">
  <float val="56.32" name="0"/>
  <float val="28.16" name="1"/>
 </vector2f>
</Gratin>
